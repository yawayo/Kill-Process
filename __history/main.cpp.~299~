//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "main.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TMainForm *MainForm;
//---------------------------------------------------------------------------
__fastcall TMainForm::TMainForm(TComponent* Owner)
	: TForm(Owner)
{
	InitializeValue();

    do_check = true;
	check_thread.start_thread((PTHREAD_START)TMainForm::CallCheckThreadFunc, (void*)this);

}
//---------------------------------------------------------------------------
void TMainForm::InitializeValue()
{
    rootPath = ExtractFilePath(ParamStr(0));
	LoadIniFile(rootPath + "Setting_Parameters.ini");

	Process_Path_label->Caption = Process_path;
	Process_Name_label->Caption = Process_name;
	Check_Cycle_label->Caption = check_cycle;
	Wait_Timeout_label->Caption = wait_time;
	Status_label->Caption = "Not Running"; Status_label->Font->Color = (TColor)RGB(255, 0, 0); Status_label->Font->Size = 20;
}
UnicodeString __fastcall TMainForm::GetIniFile(const System::UnicodeString Section, const System::UnicodeString Ident,
	const System::UnicodeString Default, AnsiString path)
{
	TIniFile* mIniFile;
	UnicodeString sMsg;

	try
	{
		mIniFile = new TIniFile(path);
		sMsg = mIniFile->ReadString(Section, Ident, Default);
	}

	catch (...)
	{
		//
	}

	delete mIniFile;

	return sMsg;
}
void TMainForm::LoadIniFile(AnsiString path)
{
	AnsiString s;

	Process_path = GetIniFile("Parameters", "Process_path", "C:/Users/iyaso/Documents/Embarcadero/Studio/Projects/forKillProcessTest/Win32/Debug/", path);

	Process_name = GetIniFile("Parameters", "Process_name", "Project1.exe", path);

	s = GetIniFile("Parameters", "check_cycle", "1000", path); check_cycle = StrToInt(s);

	s = GetIniFile("Parameters", "wait_time", "1000", path); wait_time = StrToInt(s);
}
//---------------------------------------------------------------------------
void WINAPI TMainForm::CallCheckThreadFunc(LPVOID IpParam)
{
	TMainForm* dialog = (TMainForm*)IpParam;
	dialog->Check_Func();
}
void __fastcall TMainForm::Check_Func()
{
	while(do_check)
	{
		DWORD PID = GetProcessID(Process_name);
		if(PID != -1)
		{
			DWORD dw = 0;
			HWND hProcess = GetWinHandle(PID);
			if (SendMessageTimeout(hProcess,NULL,NULL,NULL,SMTO_NORMAL,wait_time,&dw))
			{
				Status_label->Caption = "Running"; Status_label->Font->Color = (TColor)RGB(0, 255, 0); Status_label->Font->Size = 20;
				continue;
			}
			else
			{
				Status_label->Caption = "Not Running"; Status_label->Font->Color = (TColor)RGB(255, 0, 0); Status_label->Font->Size = 20;
				DWORD pid, tid;
				HANDLE hnd;

				tid = ::GetWindowThreadProcessId(hProcess, &pid);
				hnd = ::OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);
				::TerminateProcess(hnd,0);
				::CloseHandle(hnd);
			}
		}
		else
		{
			Status_label->Caption = "Not Running"; Status_label->Font->Color = (TColor)RGB(255, 0, 0); Status_label->Font->Size = 20;
			SafeCreateProcess((Process_path + Process_name).c_str());
        }
		Sleep(check_cycle);
	}
}
//---------------------------------------------------------------------------
DWORD TMainForm::GetProcessID(UnicodeString ProcessName)
{
	bool find = false;

	DWORD dwPID = 0;
	HANDLE hProcess = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);

	if (hProcess != NULL)
	{
		PROCESSENTRY32 pe32;
		pe32.dwSize = sizeof(PROCESSENTRY32);

		if (Process32First(hProcess, &pe32))
		{
			do
			{
				if (UnicodeString(pe32.szExeFile) == ProcessName)
				{
                    find = true;
					dwPID = pe32.th32ProcessID;
					break;
				}
			}
			while (Process32Next(hProcess, &pe32));
		}
		CloseHandle(hProcess);
	}

	if(find)
		return dwPID;
	else
        return -1;
}
HWND TMainForm::GetWinHandle(ULONG pid)
{
	HWND tempHwnd = FindWindow(NULL, NULL);

	while (tempHwnd != NULL)
	{
		if (GetParent(tempHwnd) == NULL)
			if (pid == ProcIDFromWnd(tempHwnd))
				return tempHwnd;
		tempHwnd = GetWindow(tempHwnd, GW_HWNDNEXT);
	}
	return NULL;
}
ULONG TMainForm::ProcIDFromWnd(HWND hwnd)
{
	ULONG idProc;
	GetWindowThreadProcessId(hwnd, &idProc);
	return idProc;
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::SafeCreateProcess(char *ProcessName)
{
	STARTUPINFOA si;
	PROCESS_INFORMATION pi;
	ZeroMemory(&si, sizeof(si));
	ZeroMemory(&pi, sizeof(pi));
	si.cb = sizeof(si);

	CreateProcessA(ProcessName, ProcessName, NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi);
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::FormCloseQuery(TObject *Sender, bool &CanClose)
{
    do_check = false;
}
//---------------------------------------------------------------------------



